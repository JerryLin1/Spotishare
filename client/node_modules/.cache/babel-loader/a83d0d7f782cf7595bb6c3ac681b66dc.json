{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tiezh\\\\Desktop\\\\Spotishare\\\\client\\\\src\\\\WebPlayback.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { PlayCircle, PauseCircle, SkipForwardCircle, SkipBackwardCircle } from \"react-bootstrap-icons\";\nimport { io } from \"socket.io-client\";\nimport { ClientContext } from \"./contexts/ClientProvider\";\nimport \"./css/Lobby.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst track = {\n  name: \"\",\n  album: {\n    images: [{\n      url: \"\"\n    }]\n  },\n  artists: [{\n    name: \"\"\n  }]\n};\n\nfunction WebPlayback(props) {\n  _s();\n\n  const client = useContext(ClientContext);\n  const [is_paused, setPaused] = useState(false);\n  const [is_active, setActive] = useState(false);\n  const [player, setPlayer] = useState(undefined);\n  const [current_track, setTrack] = useState(track);\n  useEffect(() => {\n    // Create new spotify player instance\n    const script = document.createElement(\"script\");\n    script.src = \"https://sdk.scdn.co/spotify-player.js\";\n    script.async = true;\n    document.body.appendChild(script);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      // Create tangible web player with the client's access token (requires Spotify premium)\n      const player = new window.Spotify.Player({\n        name: \"spomongus\",\n        getOAuthToken: unlockPlayer => {\n          unlockPlayer(props.token);\n        },\n        volume: 0.5\n      });\n      setPlayer(player); // Start playback on current device when the web player is ready\n\n      player.addListener(\"ready\", _ref => {\n        let {\n          device_id\n        } = _ref;\n        console.log(\"Ready with Device ID\", device_id);\n        fetch(`/playerReady?accessToken=${localStorage.getItem(\"spotify-access-token\")}&deviceId=${device_id}&roomId=${props.roomId}`);\n      });\n      player.addListener(\"not_ready\", _ref2 => {\n        let {\n          device_id\n        } = _ref2;\n        console.log(\"Device ID has gone offline\", device_id);\n      });\n      let prevPlayerState = undefined;\n      player.addListener(\"player_state_changed\", state => {\n        if (!state) return;\n        if (prevPlayerState === undefined) prevPlayerState = state;else {\n          let ptrack = prevPlayerState.track_window.current_track.id;\n          let strack = state.track_window.current_track.id;\n          let ppos = prevPlayerState.position;\n          let spos = state.position;\n\n          if (ptrack != strack) {\n            client.socket.emit(\"changeTrackRequest\", {\n              trackId: state.track_window.current_track.id,\n              track: state.track_window.current_track,\n              state: state\n            });\n            console.log(state);\n          }\n        }\n        setTrack(state.track_window.current_track);\n        setPaused(state.paused);\n        player.getCurrentState().then(state => !state ? setActive(false) : setActive(true));\n        prevPlayerState = state;\n      });\n      player.connect(); // Listen and enact playback changes\n\n      client.socket.on(\"paused\", isPaused => {\n        isPaused ? player.pause() : player.resume();\n      });\n      client.socket.on(\"changeTrack\", _ref3 => {\n        let {\n          trackId\n        } = _ref3;\n        client.socket.emit(\"changeTrack\", {\n          accessToken: localStorage.getItem(\"spotify-access-token\"),\n          trackId: trackId\n        });\n      });\n    };\n  }, []);\n\n  if (!is_active) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \" Loading player... \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: current_track.album.images[0].url,\n            id: \"nowPlayingCover\",\n            className: \"unselectable\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"nowPlayingName\",\n            children: current_track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"nowPlayingArtist\",\n            children: current_track.artists.map(artist => artist.name).join(\", \")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), client.isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"nowPlayingSide\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"spotifyBtn\",\n              onClick: () => {\n                player.previousTrack();\n              },\n              children: /*#__PURE__*/_jsxDEV(SkipBackwardCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"spotifyBtn\",\n              onClick: () => {\n                player.togglePlay();\n                client.socket.emit(\"togglePlayPause\");\n              },\n              children: is_paused ? /*#__PURE__*/_jsxDEV(PlayCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 50\n              }, this) : /*#__PURE__*/_jsxDEV(PauseCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 67\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"spotifyBtn\",\n              onClick: () => {\n                player.nextTrack();\n              },\n              children: /*#__PURE__*/_jsxDEV(SkipForwardCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(WebPlayback, \"FjEsl224i0GI+Wb612c5xGp0FvI=\");\n\n_c = WebPlayback;\nexport default WebPlayback;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebPlayback\");","map":{"version":3,"sources":["C:/Users/Tiezh/Desktop/Spotishare/client/src/WebPlayback.jsx"],"names":["React","useState","useEffect","useContext","PlayCircle","PauseCircle","SkipForwardCircle","SkipBackwardCircle","io","ClientContext","track","name","album","images","url","artists","WebPlayback","props","client","is_paused","setPaused","is_active","setActive","player","setPlayer","undefined","current_track","setTrack","script","document","createElement","src","async","body","appendChild","window","onSpotifyWebPlaybackSDKReady","Spotify","Player","getOAuthToken","unlockPlayer","token","volume","addListener","device_id","console","log","fetch","localStorage","getItem","roomId","prevPlayerState","state","ptrack","track_window","id","strack","ppos","position","spos","socket","emit","trackId","paused","getCurrentState","then","connect","on","isPaused","pause","resume","accessToken","map","artist","join","isHost","previousTrack","togglePlay","nextTrack"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { PlayCircle, PauseCircle, SkipForwardCircle, SkipBackwardCircle } from \"react-bootstrap-icons\";\nimport { io } from \"socket.io-client\";\nimport { ClientContext } from \"./contexts/ClientProvider\";\n\nimport \"./css/Lobby.css\";\n\nconst track = {\n    name: \"\",\n    album: {\n        images: [{ url: \"\" }],\n    },\n    artists: [{ name: \"\" }],\n};\n\nfunction WebPlayback(props) {\n    const client = useContext(ClientContext);\n    const [is_paused, setPaused] = useState(false);\n    const [is_active, setActive] = useState(false);\n    const [player, setPlayer] = useState(undefined);\n    const [current_track, setTrack] = useState(track);\n\n    useEffect(() => {\n        // Create new spotify player instance\n        const script = document.createElement(\"script\");\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        script.async = true;\n        document.body.appendChild(script);\n\n        window.onSpotifyWebPlaybackSDKReady = () => {\n            // Create tangible web player with the client's access token (requires Spotify premium)\n            const player = new window.Spotify.Player({\n                name: \"spomongus\",\n                getOAuthToken: (unlockPlayer) => {\n                    unlockPlayer(props.token);\n                },\n                volume: 0.5,\n            });\n            setPlayer(player);\n\n            // Start playback on current device when the web player is ready\n            player.addListener(\"ready\", ({ device_id }) => {\n                console.log(\"Ready with Device ID\", device_id);\n                fetch(\n                    `/playerReady?accessToken=${localStorage.getItem(\n                        \"spotify-access-token\"\n                    )}&deviceId=${device_id}&roomId=${props.roomId}`\n                );\n            });\n\n            player.addListener(\"not_ready\", ({ device_id }) => {\n                console.log(\"Device ID has gone offline\", device_id);\n            });\n\n            let prevPlayerState = undefined;\n            player.addListener(\"player_state_changed\", (state) => {\n                if (!state) return;\n                if (prevPlayerState === undefined) prevPlayerState = state;\n                else {\n                    let ptrack = prevPlayerState.track_window.current_track.id;\n                    let strack = state.track_window.current_track.id;\n                    let ppos = prevPlayerState.position;\n                    let spos = state.position;\n                    if (ptrack != strack) {\n                        client.socket.emit(\"changeTrackRequest\", {\n                            trackId: state.track_window.current_track.id,\n                            track: state.track_window.current_track,\n                            state: state,\n                        });\n                        console.log(state);\n                    }\n                }\n\n                setTrack(state.track_window.current_track);\n                setPaused(state.paused);\n                player.getCurrentState().then((state) => (!state ? setActive(false) : setActive(true)));\n\n                prevPlayerState = state;\n            });\n\n            player.connect();\n\n            // Listen and enact playback changes\n            client.socket.on(\"paused\", (isPaused) => {\n                isPaused ? player.pause() : player.resume();\n            });\n\n            client.socket.on(\"changeTrack\", ({ trackId }) => {\n                client.socket.emit(\"changeTrack\", {\n                    accessToken: localStorage.getItem(\"spotify-access-token\"),\n                    trackId: trackId,\n                });\n            });\n        };\n    }, []);\n\n    if (!is_active) {\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <b> Loading player... </b>\n                    </div>\n                </div>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <img\n                        src={current_track.album.images[0].url}\n                        id=\"nowPlayingCover\"\n                        className=\"unselectable\"\n                        alt=\"\"\n                    />\n                        <div id=\"nowPlayingName\">{current_track.name}</div>\n                        <div id=\"nowPlayingArtist\">{current_track.artists.map((artist) => artist.name).join(\", \")}</div>\n                        \n                        {client.isHost &&\n                            <div id=\"nowPlayingSide\">\n                                <button\n                                    className=\"spotifyBtn\"\n                                    onClick={() => {\n                                        player.previousTrack();\n                                    }}\n                                >\n                                    <SkipBackwardCircle />\n                                </button>\n\n                                <button\n                                    className=\"spotifyBtn\"\n                                    onClick={() => {\n                                        player.togglePlay();\n                                        client.socket.emit(\"togglePlayPause\");\n                                    }}\n                                >\n                                    {is_paused ? <PlayCircle /> : <PauseCircle />}\n                                </button>\n\n                                <button\n                                    className=\"spotifyBtn\"\n                                    onClick={() => {\n                                        player.nextTrack();\n                                    }}\n                                >\n                                    <SkipForwardCircle />\n                                </button>\n                            </div>\n                        }\n\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WebPlayback;\n"]},"metadata":{},"sourceType":"module"}