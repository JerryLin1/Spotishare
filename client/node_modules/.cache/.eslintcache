[{"C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\index.js":"1","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\Lobby.jsx":"2","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\Home.jsx":"3","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\PreLobby.jsx":"4","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\contexts\\ClientProvider.jsx":"5","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\WebPlayback.jsx":"6","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\Queue.jsx":"7","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\client.js":"8"},{"size":2193,"mtime":1640739319680,"results":"9","hashOfConfig":"10"},{"size":10055,"mtime":1640719127719,"results":"11","hashOfConfig":"10"},{"size":870,"mtime":1640713995285,"results":"12","hashOfConfig":"10"},{"size":1114,"mtime":1640713995287,"results":"13","hashOfConfig":"10"},{"size":389,"mtime":1640554529052,"results":"14","hashOfConfig":"10"},{"size":6094,"mtime":1640714111910,"results":"15","hashOfConfig":"10"},{"size":1521,"mtime":1640719127720,"results":"16","hashOfConfig":"10"},{"size":996,"mtime":1640713995289,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"130y1tx",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\index.js",["40","41"],"C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\Lobby.jsx",["42","43","44","45","46","47","48","49","50","51","52"],"import { useContext, useEffect, useRef, useState } from \"react\";\nimport { Row, Col, Container, Card, Form, Button } from \"react-bootstrap\";\nimport { CaretDownFill, CaretUpFill } from \"react-bootstrap-icons\";\nimport { useParams } from \"react-router-dom\";\n\nimport Client from \"./client.js\";\nimport WebPlayback from \"./WebPlayback.jsx\";\nimport Queue from \"./Queue.jsx\";\nimport { ClientContext } from \"./contexts/ClientProvider.jsx\";\n\nimport { isLoggedIn, login } from \".\";\n\nimport \"./css/Lobby.css\";\n\nfunction Lobby(props) {\n    let { roomId } = useParams();\n    const client = useContext(ClientContext);\n    const [members, setMembers] = useState([]); //useState([{ isHost: true, name: 'Tom Han', id: 'p.han.tom', country: 'CA', image: 'https://i.scdn.co/image/ab6775700000ee8508f4b5251c39729ba880fb66' }]);\n    const [chat, setChat] = useState([]);\n    const [queue, updateQueue] = useState([\n        \"3dPtXHP0oXQ4HCWHsOA9js?si=8593d745abde4cb7\",\n        \"3dPtXHP0oXQ4HCWHsOA9js?si=8593d745abde4cb7\",\n        \"185Wm4Mx09dQG0fUktklDm?si=8fd67a8eb5f04c99\",\n        \"3dPtXHP0oXQ4HCWHsOA9js?si=8593d745abde4cb7\",\n        \"185Wm4Mx09dQG0fUktklDm?si=8fd67a8eb5f04c99\",\n        \"185Wm4Mx09dQG0fUktklDm?si=8fd67a8eb5f04c99\",\n    ]);\n    const [typingTimeout, updateTypingTimeout] = useState(undefined);\n    const [searchResults, setSearchResults] = useState([]);\n\n    const searchInputRef = useRef(null);\n\n    const renderMembers = () => {\n        let newMemberList = [];\n        for (const user of members) {\n            newMemberList.push(\n                <Row className=\"member-card\">\n                    <Col id=\"member-name\">\n                        {user.name}\n                        {user.isHost && (\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width={36} height={20} viewBox=\"0 0 512 512\" fill=\"gold\">\n                                <path d=\"M528 448H112c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h416c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm64-320c-26.5 0-48 21.5-48 48 0 7.1 1.6 13.7 4.4 19.8L476 239.2c-15.4 9.2-35.3 4-44.2-11.6L350.3 85C361 76.2 368 63 368 48c0-26.5-21.5-48-48-48s-48 21.5-48 48c0 15 7 28.2 17.7 37l-81.5 142.6c-8.9 15.6-28.9 20.8-44.2 11.6l-72.3-43.4c2.7-6 4.4-12.7 4.4-19.8 0-26.5-21.5-48-48-48S0 149.5 0 176s21.5 48 48 48c2.6 0 5.2-.4 7.7-.8L128 416h384l72.3-192.8c2.5.4 5.1.8 7.7.8 26.5 0 48-21.5 48-48s-21.5-48-48-48z\" />\n                            </svg>\n                        )}\n                    </Col>\n                    <Col style={{ display: \"flex\", justifyContent: \"right\", padding: \"0\" }}>\n                        <div id=\"pfp-container\">\n                            <img id=\"member-pfp\" src={user.image} />\n                        </div>\n                    </Col>\n                </Row>\n            );\n        }\n\n        return newMemberList;\n    };\n\n    const initializeUser = () => {\n        fetch(`/joinLobby?roomId=${roomId}&accessToken=${localStorage.getItem(\"spotify-access-token\")}&socketid=${client.socket.id}`).then((data) => {\n            if (data.status === 200) {\n                client.socket.emit(\n                    \"joinRoom\",\n                    { roomId: roomId, accessToken: localStorage.getItem(\"spotify-access-token\") },\n                    (response) => {\n                        client.isHost = response.isHost;\n                    }\n                );\n            }\n        });\n    };\n\n    const addToQueue = (id) => {\n        let newQueue = queue.slice();\n        queue.push(id);\n        newQueue.push(id);\n        updateQueue(newQueue);\n    };\n\n    useEffect(() => {\n        initializeUser();\n\n        client.socket.on(\"receiveMessage\", ({ msg, type, userName, userId }) => {\n            const chat = document.getElementById(\"chat\");\n\n            // console.log(chat.scrollTop + chat.clientHeight, chat.scrollHeight);\n            if (chat.scrollTop + chat.clientHeight >= chat.scrollHeight - 200) chat.scrollTop = chat.scrollHeight;\n\n            setChat((oldChat) => [\n                ...oldChat,\n                <div>\n                    {type == \"USER\" && (\n                        <span>\n                            <strong>{userName}</strong>:\n                        </span>\n                    )}{\" \"}\n                    <span dangerouslySetInnerHTML={{ __html: processChatMessage(msg) }} />\n                </div>,\n            ]);\n        });\n\n        client.socket.on(\"updateClientList\", (clients) => {\n            client.clientsInRoom = clients;\n            setMembers(Object.values(clients));\n        });\n    }, []);\n\n    const toggleLobbyList = () => {\n        if (document.getElementsByClassName(\"lobby-list\")[0].classList.contains(\"visible\")) {\n            document.getElementsByClassName(\"lobby-list\")[0].className = \"lobby-list\";\n            document.getElementById(\"caret\").style.transform = \"translateY(-50%) rotate(0deg)\";\n        } else {\n            document.getElementsByClassName(\"lobby-list\")[0].className = \"lobby-list visible\";\n            document.getElementById(\"caret\").style.transform = \"translateY(-50%) rotate(180deg)\";\n        }\n    };\n\n    return (\n        <Container fluid>\n            <div className=\"page-title unselectable\">SpotiShare</div>\n            <Row>\n                <Col xl=\"8\">\n                    <WebPlayback roomId={roomId} disabled={client.isHost} token={localStorage.getItem(\"spotify-access-token\")} />\n                </Col>\n                <Col>\n                    <Card className=\"chat-container\">\n                        <Card.Header id=\"chat-header\" className=\"unselectable\">\n                            Chat\n                        </Card.Header>\n                        <div className=\"dropdown unselectable\" onClick={toggleLobbyList}>\n                            <p style={{ margin: \"0\" }}>Currently listening ({members ? members.length : 0})</p>\n                            <CaretDownFill id=\"caret\" />\n                        </div>\n                        <div className=\"lobby-list\">{renderMembers()}</div>\n                        <Card.Body id=\"chat\">{chat}</Card.Body>\n                    </Card>\n                    <Form\n                        autoComplete=\"off\"\n                        onSubmit={(event) => {\n                            event.preventDefault();\n                            client.sendMessage(document.getElementById(\"chatInput\").value);\n                            document.getElementById(\"chatInput\").value = \"\";\n                        }}\n                    >\n                        <div id=\"sendBar\">\n                            <input placeholder=\"Type a message...\" type=\"text\" id=\"chatInput\" />\n                            <Button variant=\"outline-dark\" type=\"submit\" id=\"sendBtn\">\n                                Send Message\n                            </Button>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs=\"6\" xl=\"8\" id=\"queue\">\n                    <Queue queue={queue} />\n                </Col>\n                <Col id=\"search-conatiner\">\n                    <div id=\"searchArea\">\n                        <h3 className=\"unselectable\">Find a Song!</h3>\n                        <input\n                            ref={searchInputRef}\n                            onInput={() => {\n                                clearTimeout(typingTimeout);\n                                updateTypingTimeout(\n                                    setTimeout(() => {\n                                        fetch(\n                                            `/search?value=${searchInputRef.current.value}&accessToken=${localStorage.getItem(\n                                                \"spotify-access-token\"\n                                            )}`\n                                        )\n                                            .then((e) => e.json())\n                                            .then((data) => {\n                                                setSearchResults(data);\n                                            });\n                                    }, 500)\n                                );\n                            }}\n                            id=\"searchbox\"\n                            type=\"text\"\n                            placeholder=\"Artist, Song Name, Album...\"\n                        />\n                        <div id=\"result-list\">\n                            {searchResults.map((item, key) => {\n                                return (\n                                    <Row key={key} className=\"song-card\">\n                                        <Col xs={10}>\n                                            <iframe\n                                                src={`https://open.spotify.com/embed/track/${item.id}?utm_source=generator`}\n                                                width=\"100%\"\n                                                height=\"80\"\n                                                frameBorder=\"0\"\n                                                allowFullScreen=\"\"\n                                                allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n                                            ></iframe>\n                                        </Col>\n                                        <Col style={{ display: \"flex\", alignItems: \"center\", padding: \"0\" }}>\n                                            <button>Add</button>\n                                        </Col>\n                                    </Row>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\n// modified from https://stackoverflow.com/a/8943487\nfunction processChatMessage(text) {\n    var urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gi;\n    return text.replace(urlRegex, function (url) {\n        return `<a target=\"_blank\" href=\"${url}\"> ${url} </a>`;\n    });\n}\n\nexport default Lobby;\n","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\Home.jsx",["53","54","55","56"],"import { useState } from \"react\";\n\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { isLoggedIn, login } from \".\";\n\nfunction HomePage(props) {\n    return (\n        <Container fluid>\n            <button onClick={() => login()} id=\"sign-in\">\n                Sign in\n            </button>\n            <h1 className=\"page-title unselectable\">SpotiShare</h1>\n\n            <div>\n                <button onClick={() => (isLoggedIn() ? createLobby() : login())}>Create Lobby</button>\n            </div>\n        </Container>\n    );\n}\n\nasync function createLobby() {\n    fetch(`/createLobby?accessToken=${localStorage.getItem(\"spotify-access-token\")}`)\n        .then((e) => e.json())\n        .then((data) => (window.location = data.roomId))\n        .catch((error) => alert(error));\n}\n\nexport default HomePage;\n","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\PreLobby.jsx",[],"C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\contexts\\ClientProvider.jsx",["57","58","59"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport Client from \"../client\";\r\n\r\nexport const ClientContext = React.createContext({ client: null });\r\n\r\nexport const ClientProvider = ({ children }) => {\r\n    const [client, setClient] = useState(new Client())\r\n\r\n    return (\r\n        <ClientContext.Provider value={client}>{children}</ClientContext.Provider>\r\n    )\r\n}","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\WebPlayback.jsx",["60","61","62","63","64"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { PlayCircle, PauseCircle, SkipForwardCircle, SkipBackwardCircle } from \"react-bootstrap-icons\";\nimport { io } from \"socket.io-client\";\nimport { ClientContext } from \"./contexts/ClientProvider\";\n\nimport \"./css/Lobby.css\";\n\nconst track = {\n    name: \"\",\n    album: {\n        images: [{ url: \"\" }],\n    },\n    artists: [{ name: \"\" }],\n};\n\nfunction WebPlayback(props) {\n    const client = useContext(ClientContext);\n    const [is_paused, setPaused] = useState(false);\n    const [is_active, setActive] = useState(false);\n    const [player, setPlayer] = useState(undefined);\n    const [current_track, setTrack] = useState(track);\n\n    useEffect(() => {\n        // Create new spotify player instance\n        const script = document.createElement(\"script\");\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        script.async = true;\n        document.body.appendChild(script);\n\n        window.onSpotifyWebPlaybackSDKReady = () => {\n            // Create tangible web player with the client's access token (requires Spotify premium)\n            const player = new window.Spotify.Player({\n                name: \"spomongus\",\n                getOAuthToken: (unlockPlayer) => {\n                    unlockPlayer(props.token);\n                },\n                volume: 0.5,\n            });\n            setPlayer(player);\n\n            // Start playback on current device when the web player is ready\n            player.addListener(\"ready\", ({ device_id }) => {\n                console.log(\"Ready with Device ID\", device_id);\n                fetch(\n                    `/playerReady?accessToken=${localStorage.getItem(\n                        \"spotify-access-token\"\n                    )}&deviceId=${device_id}&roomId=${props.roomId}`\n                );\n            });\n\n            player.addListener(\"not_ready\", ({ device_id }) => {\n                console.log(\"Device ID has gone offline\", device_id);\n            });\n\n            let prevPlayerState = undefined;\n            player.addListener(\"player_state_changed\", (state) => {\n                if (!state) return;\n                if (prevPlayerState === undefined) prevPlayerState = state;\n                else {\n                    let ptrack = prevPlayerState.track_window.current_track.id;\n                    let strack = state.track_window.current_track.id;\n                    let ppos = prevPlayerState.position;\n                    let spos = state.position;\n                    if (ptrack != strack) {\n                        client.socket.emit(\"changeTrackRequest\", {\n                            trackId: state.track_window.current_track.id,\n                            track: state.track_window.current_track,\n                            state: state,\n                        });\n                        console.log(state);\n                    }\n                }\n\n                setTrack(state.track_window.current_track);\n                setPaused(state.paused);\n                player.getCurrentState().then((state) => (!state ? setActive(false) : setActive(true)));\n\n                prevPlayerState = state;\n            });\n\n            player.connect();\n\n            // Listen and enact playback changes\n            client.socket.on(\"paused\", (isPaused) => {\n                isPaused ? player.pause() : player.resume();\n            });\n\n            client.socket.on(\"changeTrack\", ({ trackId }) => {\n                client.socket.emit(\"changeTrack\", {\n                    accessToken: localStorage.getItem(\"spotify-access-token\"),\n                    trackId: trackId,\n                });\n            });\n        };\n    }, []);\n\n    if (!is_active) {\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <b> Loading player... </b>\n                    </div>\n                </div>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <img\n                        src={current_track.album.images[0].url}\n                        id=\"nowPlayingCover\"\n                        className=\"unselectable\"\n                        alt=\"\"\n                    />\n                        <div id=\"nowPlayingName\">{current_track.name}</div>\n                        <div id=\"nowPlayingArtist\">{current_track.artists.map((artist) => artist.name).join(\", \")}</div>\n                        \n                        {client.isHost &&\n                            <div id=\"nowPlayingSide\">\n                                <button\n                                    className=\"spotifyBtn\"\n                                    onClick={() => {\n                                        player.previousTrack();\n                                    }}\n                                >\n                                    <SkipBackwardCircle />\n                                </button>\n\n                                <button\n                                    className=\"spotifyBtn\"\n                                    onClick={() => {\n                                        player.togglePlay();\n                                        client.socket.emit(\"togglePlayPause\");\n                                    }}\n                                >\n                                    {is_paused ? <PlayCircle /> : <PauseCircle />}\n                                </button>\n\n                                <button\n                                    className=\"spotifyBtn\"\n                                    onClick={() => {\n                                        player.nextTrack();\n                                    }}\n                                >\n                                    <SkipForwardCircle />\n                                </button>\n                            </div>\n                        }\n\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WebPlayback;\n","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\Queue.jsx",["65"],"import { Row, Col } from \"react-bootstrap\";\n\nfunction Queue(props) {\n    const queue = props.queue;\n\n    return (\n        <div id=\"queue-container\">\n            <h2 id=\"queue-title\" className=\"unselectable\">\n                Next In Queue\n            </h2>\n            {queue.map((item, key) => {\n                return (\n                    <Row key={key} className=\"song-card\">\n                        <Col xs={12} xl={10} style={{ padding: \"0 0.5em\", alignItems: \"center\" }}>\n                            <iframe\n                                src={`https://open.spotify.com/embed/track/${item}?utm_source=generator`}\n                                width=\"100%\"\n                                height=\"80\"\n                                frameBorder=\"0\"\n                                allowFullScreen=\"\"\n                                allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n                            ></iframe>\n                        </Col>\n                        <Col\n                            style={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                                padding: \"0 0.5em\",\n                            }}\n                        >\n                            <button>Remove</button>\n                        </Col>\n                    </Row>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Queue;\n","C:\\Users\\Tiezh\\Desktop\\Spotishare\\client\\src\\client.js",["66"],"import React from \"react\";\nimport io from \"socket.io-client\";\n\nexport default class Client extends React.Component {\n    constructor(props) {\n        super(props);\n        this.socket = io();\n\n        // Redirect URL when client joins/creates room\n        this.socket.on(\"redirect\", (id) => {\n            this.roomId = id;\n            this.pushURL(id);\n        });\n\n        this.socket.on(\"updateClientList\", (clients) => {\n            this.clientsInRoom = clients;\n        });\n    }\n\n    pushURL = (id) => {\n        this.props.match.history.push(\"/\" + id);\n    };\n\n    redirectURL = (id) => {\n        this.props.match.history.replace(\"/\" + id);\n    };\n\n    createRoom = () => {\n        this.socket.emit(\"createRoom\");\n    };\n\n    joinRoom = (roomId) => {\n        this.roomId = roomId;\n        this.socket.emit(\"joinRoom\", {\n            roomId: roomId,\n        });\n    };\n\n    sendMessage = (msg) => {\n        if (msg != \"\") {\n            this.socket.emit(\"sendMessage\", msg);\n        }\n    };\n}\n",{"ruleId":"67","severity":1,"message":"68","line":3,"column":32,"nodeType":"69","messageId":"70","endLine":3,"endColumn":44},{"ruleId":"71","severity":1,"message":"72","line":33,"column":34,"nodeType":"73","messageId":"74","endLine":33,"endColumn":36},{"ruleId":"67","severity":1,"message":"75","line":3,"column":25,"nodeType":"69","messageId":"70","endLine":3,"endColumn":36},{"ruleId":"67","severity":1,"message":"76","line":6,"column":8,"nodeType":"69","messageId":"70","endLine":6,"endColumn":14},{"ruleId":"67","severity":1,"message":"77","line":11,"column":10,"nodeType":"69","messageId":"70","endLine":11,"endColumn":20},{"ruleId":"67","severity":1,"message":"78","line":11,"column":22,"nodeType":"69","messageId":"70","endLine":11,"endColumn":27},{"ruleId":"79","severity":1,"message":"80","line":48,"column":29,"nodeType":"81","endLine":48,"endColumn":69},{"ruleId":"67","severity":1,"message":"82","line":72,"column":11,"nodeType":"69","messageId":"70","endLine":72,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":91,"column":27,"nodeType":"73","messageId":"74","endLine":91,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":105,"column":8,"nodeType":"85","endLine":105,"endColumn":10,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":187,"column":45,"nodeType":"81","endLine":194,"endColumn":46},{"ruleId":"89","severity":1,"message":"90","line":212,"column":58,"nodeType":"91","messageId":"92","endLine":212,"endColumn":59,"suggestions":"93"},{"ruleId":"89","severity":1,"message":"90","line":212,"column":85,"nodeType":"91","messageId":"92","endLine":212,"endColumn":86,"suggestions":"94"},{"ruleId":"67","severity":1,"message":"95","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":18},{"ruleId":"67","severity":1,"message":"96","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":13},{"ruleId":"67","severity":1,"message":"97","line":3,"column":15,"nodeType":"69","messageId":"70","endLine":3,"endColumn":18},{"ruleId":"67","severity":1,"message":"98","line":3,"column":31,"nodeType":"69","messageId":"70","endLine":3,"endColumn":37},{"ruleId":"67","severity":1,"message":"99","line":1,"column":27,"nodeType":"69","messageId":"70","endLine":1,"endColumn":36},{"ruleId":"67","severity":1,"message":"100","line":1,"column":38,"nodeType":"69","messageId":"70","endLine":1,"endColumn":51},{"ruleId":"67","severity":1,"message":"101","line":7,"column":20,"nodeType":"69","messageId":"70","endLine":7,"endColumn":29},{"ruleId":"67","severity":1,"message":"102","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":12},{"ruleId":"67","severity":1,"message":"103","line":62,"column":25,"nodeType":"69","messageId":"70","endLine":62,"endColumn":29},{"ruleId":"67","severity":1,"message":"104","line":63,"column":25,"nodeType":"69","messageId":"70","endLine":63,"endColumn":29},{"ruleId":"71","severity":1,"message":"105","line":64,"column":32,"nodeType":"73","messageId":"74","endLine":64,"endColumn":34},{"ruleId":"83","severity":1,"message":"106","line":95,"column":8,"nodeType":"85","endLine":95,"endColumn":10,"suggestions":"107"},{"ruleId":"87","severity":1,"message":"88","line":15,"column":29,"nodeType":"81","endLine":22,"endColumn":30},{"ruleId":"71","severity":1,"message":"105","line":40,"column":17,"nodeType":"73","messageId":"74","endLine":40,"endColumn":19},"no-unused-vars","'MemoryRouter' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CaretUpFill' is defined but never used.","'Client' is defined but never used.","'isLoggedIn' is defined but never used.","'login' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'addToQueue' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'initializeUser'. Either include them or remove the dependency array.","ArrayExpression",["108"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["109","110"],["111","112"],"'useState' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'createContext' is defined but never used.","'setClient' is assigned a value but never used.","'io' is defined but never used.","'ppos' is assigned a value but never used.","'spos' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'client.socket', 'props.roomId', and 'props.token'. Either include them or remove the dependency array.",["113"],{"desc":"114","fix":"115"},{"messageId":"116","fix":"117","desc":"118"},{"messageId":"119","fix":"120","desc":"121"},{"messageId":"116","fix":"122","desc":"118"},{"messageId":"119","fix":"123","desc":"121"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [client, initializeUser]",{"range":"126","text":"127"},"removeEscape",{"range":"128","text":"129"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"130","text":"131"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"132","text":"129"},{"range":"133","text":"131"},"Update the dependencies array to be: [client.socket, props.roomId, props.token]",{"range":"134","text":"135"},[4519,4521],"[client, initializeUser]",[9866,9867],"",[9866,9866],"\\",[9893,9894],[9893,9893],[3669,3671],"[client.socket, props.roomId, props.token]"]